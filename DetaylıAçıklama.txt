Elbette, işte projenin tüm detaylarını içeren açıklama metni:

---

# Chat Uygulaması Projesi

## Genel Bakış

Bu proje, ReactJS ve Socket.io kullanarak geliştirilmiş bir chat uygulamasıdır. Uygulama, kullanıcıların farklı gruplar arasında sohbet edebildiği ve çevrimiçi kullanıcı listesini görebildiği bir platform sağlar. MockAPI üzerinden veri yönetimi yapılmakta olup, kullanıcıların avatar seçimi ve mesaj gönderimi gibi temel özellikler bulunmaktadır. Tasarım, modern ve sade bir görünüme sahip olup, kullanıcı deneyimini artıracak şekilde tasarlanmıştır.

## Sayfa Düzeni ve İşlevler

### 1. Giriş Ekranı (Login.js)

- **Kullanıcı Adı ve Avatar Seçimi**:
  Kullanıcılar, giriş ekranında bir kullanıcı adı belirleyebilir ve rastgele seçilmiş beş avatar arasından birini seçebilir. Avatar seçimleri, `https://avatar.iran.liara.run/public/{number}` linkinden alınan resimlerdir.

- **Kayıt ve Giriş Fonksiyonları**:
  Kullanıcı adı ve avatar seçimi tamamlandığında, kayıt olma ve giriş işlemleri gerçekleştirilebilir. Kayıt işlemi, mockAPI'deki kullanıcılar tablosuna verileri kaydeder.

### 2. Chat Ekranı (Chat.js)

- **Grup Listesi**:
  - Solda statik olarak tanımlanmış üç grup bulunur: "Genel", "Teknoloji" ve "Eğlence".
  - Kullanıcı grubu seçtiğinde, seçilen grubun mesajları gösterilir. Grup değiştirildiğinde mesaj listesi güncellenir.

- **Sohbet Ekranı**:
  - Ortada sohbetlerin listelendiği alan yer alır.
  - Mesajlar, kullanıcı adı ve avatar ile gösterilir. Her kullanıcının mesajı farklı renkte olur.
  - Mesaj gönderildiğinde, mesaj listesi otomatik olarak güncellenir.

- **Sohbet Yazma Fonksiyonu**:
  - Sohbet ekranının alt kısmında mesaj gönderme alanı bulunur. Kullanıcılar mesajı yazıp gönderebilir ve `Enter` tuşu ile mesaj gönderimi desteklenir.

- **Online Kullanıcılar Listesi**:
  - Sağda, çevrimiçi kullanıcıların listesi yer alır. Giriş yapan kullanıcı, diğer kullanıcılar arasında farklı renkte belirtilir.

## Backend İşlevselliği

- **Socket.io Entegrasyonu**:
  - Kullanıcıların mesaj göndermesi ve grup değişiklikleri gibi işlemler, Socket.io kullanılarak frontend ile senkronize edilir. Böylece anlık mesajlaşma ve kullanıcı etkileşimleri sağlanır.

## Veritabanı Yapısı

- **Users Tablosu**:
  - `id` (object ID)
  - `createdAt` (Date)
  - `name` (string)
  - `avatar` (string)

- **Messages Tablosu**:
  - `id` (object ID)
  - `createdAt` (Date)
  - `message` (string)
  - `group` (string)
  - `from` (string)

## Kullanıcı Deneyimi ve Tasarım

- **Modern ve Renkli Tasarım**:
  - Uygulama, kullanıcıların rahat bir şekilde sohbet edebilmesi için sade ve modern bir tasarıma sahiptir.
  - Renk paleti ve düzenlemelerle, kullanıcı arayüzü daha çekici ve işlevsel hale getirilmiştir.

- **Emoji Desteği**:
  - Grup isimlerinin yanında, grup türüne özel emoji kullanımı sağlanmıştır. Örneğin, "Genel" grubu için 🌍, "Teknoloji" grubu için 💻, "Eğlence" grubu için 🎉 emoji kullanılmıştır.

## Detaylı Açıklamalar

### Login.js

#### 1. `handleSubmit`
- **Parametre**: `event` (object)
- **İşlev**: Kullanıcının giriş veya kayıt formunu gönderdiğinde çalışır.
- **Ayrıntılar**:
  - Form verilerini alır (kullanıcı adı ve seçilen avatar).
  - Eğer kullanıcı daha önce kayıtlı değilse yeni bir kullanıcı oluşturur ve API'ye kaydeder.
  - API'den gelen yanıtlara göre kullanıcıyı giriş yapar veya hataları işler.

#### 2. `handleLogin`
- **Parametre**: `username` (string)
- **İşlev**: Kullanıcının giriş yapma işlemini yönetir.
- **Ayrıntılar**:
  - Kullanıcının giriş yapmasını sağlar.
  - Kullanıcı adını kontrol eder ve API üzerinden doğrulama yapar.

#### 3. `handleRegistration`
- **Parametre**: `username` (string), `avatar` (string)
- **İşlev**: Kullanıcının kayıt olma işlemini yönetir.
- **Ayrıntılar**:
  - Yeni bir kullanıcı kaydı oluşturur.
  - Kullanıcı adı ve avatar bilgisini API'ye gönderir.

#### 4. `renderAvatarOptions`
- **Parametre**: -
- **İşlev**: Avatar seçeneklerini render eder.
- **Ayrıntılar**:
  - API'den gelen avatar seçeneklerini listeleyerek kullanıcıya gösterir.
  - Kullanıcının bir avatar seçmesini sağlar.

#### 5. `handleAvatarSelect`
- **Parametre**: `avatar` (string)
- **İşlev**: Kullanıcının bir avatar seçmesini yönetir.
- **Ayrıntılar**:
  - Kullanıcının seçtiği avatarı alır ve kullanıcı arayüzünde gösterir.
  - Seçilen avatarı kullanıcı adıyla birlikte API'ye gönderir.

### Chat.js

#### 1. `useEffect`
- **Parametre**: -
- **İşlev**: Component'in yüklendiğinde ve güncellendiğinde çalışan etkileşimli fonksiyon.
- **Ayrıntılar**:
  - Socket bağlantısını başlatır.
  - Kullanıcı adı veya grup değiştiğinde mesajları günceller.

#### 2. `sendMessage`
- **Parametre**: `event` (object)
- **İşlev**: Kullanıcının mesaj gönderme işlemini yönetir.
- **Ayrıntılar**:
  - Kullanıcının girdiği mesajı alır ve API'ye gönderir.
  - Gönderilen mesajı anlık olarak diğer kullanıcılara yayınlar.

#### 3. `handleMessageInput`
- **Parametre**: `event` (object)
- **İşlev**: Kullanıcının mesaj girişini yönetir.
- **Ayrıntılar**:
  - Kullanıcının mesajını input alanından alır ve duruma kaydeder.
  - Enter tuşuna basarak mesajı gönderebilir.

#### 4. `renderMessages`
- **Parametre**: -
- **İşlev**: Mesajları render eder.
- **Ayrıntılar**:
  - Grup değiştiğinde veya yeni bir mesaj geldiğinde mesajları günceller.
  - Kullanıcı adı ve mesaj içeriğini listeler.

#### 5. `renderOnlineUsers`
- **Parametre**: -
- **İşlev**: Online kullanıcıları render eder.
- **Ayrıntılar**:
  - Socket bağlantısıyla online kullanıcıları takip eder.
  - Kullanıcı adını ve durumunu listeler.

### Server.js

#### 1. `handleSocketConnection`
- **Parametre**: `socket` (object)
- **İşlev**: Yeni bir socket bağlantısını yönetir.
- **Ayrıntılar**: 
  - Yeni bir kullanıcı bağlandığında bu işlev çalışır.
  - Kullanıcının bağlandığını loglar ve bağlantıyı yönetir.

#### 2. `handleSocketDisconnection`
- **Parametre**: `socket` (object)
- **İşlev**: Socket bağlantısının kesilmesini yönetir.
- **Ayrıntılar**: 
  - Kullanıcı bağlantısı kesildiğinde bu işlev çalışır.
  - Kullanıcının ayrıldığını loglar ve bağlantıyı temizler.

#### 3. `handleMessageBroadcast`
- **Parametre**: `message` (object)
- **İşlev**: Yeni bir mesajın yayınlanmasını yönetir.
- **Ayrıntılar**: 
  - Kullanıcının gönderdiği mesajı diğer kullanıcılara iletmek için kullanılır.
  - Mesajın grup bilgisini kontrol ederek doğru gruba yayınlar.

#### 4. `handleGroupChange`
- **Parametre**: `group` (string)
- **İşlev**: Kullanıcının grup değişikliğini yönetir.
- **Ayrıntılar**: 
  - Kullanıcının yeni bir gruba geçtiğinde bu işlev çalışır.
  - Kullanıcının yeni grup bilgisini loglar ve gerekli işlemleri yapar.

#### 5. `logError`
- **Parametre**: `error` (object)
- **İşlev**: Hata durumlarını loglar.
- **Ayrıntılar**: 
  - Uygulamada oluşan hataları yakalar ve loglar.
  - Hataları detaylı bir şekilde kaydederek sorunları tespit etmeye yardımcı olur.

#### 6. `logInfo`
- **Parametre**: `info` (string)
- **İşlev**: Bilgi mesajlarını loglar.
- **Ayrıntılar**: 
  - Uygulamanın çalışmasıyla ilgili bilgi mesajlarını kaydeder.
  - Örneğin, kullanıcı bağlantıları veya grup değişiklikleri hakkında bilgi verir.

#### 7. `startServer`
- **Parametre**: -
- **İşlev**: Sunucuyu başlatır ve soket bağlantısını dinlemeye başlar.
- **Ayrıntılar**: 
  - Uygulamanın ana başlangıç noktasıdır.
  - Soket bağlantılarını dinler ve gelen istekleri yönlendirir.

## Loglama ve Hata Yönetimi

- Backend tarafında ayrıntılı loglama yapılmıştır. Bu sayede sistem hataları ve kullanıcı etkileşimleri kolayca takip edilebilir.

---